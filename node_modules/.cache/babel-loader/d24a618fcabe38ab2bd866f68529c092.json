{"ast":null,"code":"var _jsxFileName = \"/home/pi/coding/homepage/src/App.js\";\nimport React from 'react';\nimport './App.css';\n\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      time: '00:00:00 AM'\n    };\n    this.updateTime = this.updateTime.bind(this);\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(this.updateTime, 1000);\n  }\n\n  updateTime() {\n    let date = new Date();\n    let hours = date.getHours();\n    let minutes = date.getMinutes();\n\n    if (minutes < 10) {\n      minutes = '0' + minutes;\n    }\n\n    let seconds = date.getSeconds();\n\n    if (seconds < 10) {\n      seconds = '0' + seconds;\n    }\n\n    let period = ' AM';\n\n    if (hours >= 12) {\n      period = ' PM';\n\n      if (hours > 12) {\n        hours -= 12;\n      }\n    }\n\n    if (hours < 10) {\n      hours = '0' + hours;\n    }\n\n    this.setState({\n      time: hours + ':' + minutes + ':' + seconds + period\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"clock\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }\n    }, this.state.time);\n  }\n\n}\n\nclass Weather extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      request: new XMLHttpRequest(),\n      temperature: 'retreiving weather data',\n      wind: '',\n      forecast: '',\n      test: ''\n    };\n    this.getWeatherData = this.getWeatherData.bind(this);\n  }\n\n  componentDidMount() {\n    this.state.request.open('GET', 'https://api.weather.gov/gridpoints/LIX/61,92/forecast');\n    this.state.request.send();\n    this.interval = setInterval(this.getWeatherData, 1000);\n  }\n\n  getWeatherData() {\n    if (this.state.request.status === 0) {\n      return;\n    }\n\n    let weatherData = JSON.parse(this.state.request.responseText);\n    this.setState({\n      temperature: this.state.test.properties.periods[0].temperature\n    });\n    console.log(this.state.temperature);\n    clearInterval(this.interval);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"weather\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }\n    }, this.state.temperature));\n  }\n\n}\n\nfunction App() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"grid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Clock, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Weather, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/pi/coding/homepage/src/App.js"],"names":["React","Clock","Component","constructor","props","state","time","updateTime","bind","componentDidMount","interval","setInterval","date","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","period","setState","render","Weather","request","XMLHttpRequest","temperature","wind","forecast","test","getWeatherData","open","send","status","weatherData","JSON","parse","responseText","properties","periods","console","log","clearInterval","App"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass Clock extends React.Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            time: '00:00:00 AM'\n        }\n\n        this.updateTime = this.updateTime.bind(this);\n    }\n\n    componentDidMount(){\n        this.interval = setInterval(this.updateTime, 1000);\n    }\n\n    updateTime(){\n        let date = new Date();\n        let hours = date.getHours();\n        let minutes = date.getMinutes();\n        if(minutes < 10){\n            minutes = '0' + minutes;\n        }\n        let seconds = date.getSeconds();\n        if(seconds < 10){\n            seconds = '0' + seconds;\n        }\n        let period = ' AM';\n\n        if(hours >= 12){\n            period = ' PM'\n\n            if(hours > 12){\n                hours -= 12;\n            }\n        }\n        if(hours < 10){\n            hours = '0' + hours;\n        }\n\n        this.setState({time: hours + ':' + minutes + ':' + seconds + period});\n    }\n\n    render(){\n        return(\n            <div id='clock'>\n                {this.state.time}\n            </div>\n        );\n    }\n}\n\nclass Weather extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            request: new XMLHttpRequest(),\n            temperature: 'retreiving weather data',\n            wind: '',\n            forecast: '',\n            test: ''\n        }\n\n        this.getWeatherData = this.getWeatherData.bind(this);\n    }\n\n    componentDidMount(){\n        this.state.request.open('GET', 'https://api.weather.gov/gridpoints/LIX/61,92/forecast');\n        this.state.request.send();\n        this.interval = setInterval(this.getWeatherData, 1000);\n    }\n\n    getWeatherData(){\n        if(this.state.request.status === 0){\n            return\n        }\n\n        let weatherData = JSON.parse(this.state.request.responseText);\n        this.setState({temperature: this.state.test.properties.periods[0].temperature});\n        console.log(this.state.temperature);\n        clearInterval(this.interval);\n    }\n\n    render(){\n        return(\n            <div id=\"weather\">\n                <p>{this.state.temperature}</p>\n            </div>\n        )\n    }\n}\n\nfunction App() {\n    return (\n    <div className=\"App\">\n        <div id='grid'>\n            <Clock />\n            <Weather />\n        </div>\n    </div>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}