{"version":3,"sources":["App.js","index.js"],"names":["Clock","props","state","time","updateTime","bind","this","interval","setInterval","date","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","period","setState","id","React","Component","Weather","request","XMLHttpRequest","temperature","wind","forecast","imageUrl","getWeatherData","open","send","status","weatherData","JSON","parse","responseText","properties","periods","windSpeed","windDirection","shortForecast","icon","clearInterval","src","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAGMA,G,wDACF,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTC,KAAM,eAGV,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBANJ,E,gEAUdC,KAAKC,SAAWC,YAAYF,KAAKF,WAAY,O,mCAI7C,IAAIK,EAAO,IAAIC,KACXC,EAAQF,EAAKG,WACbC,EAAUJ,EAAKK,aAChBD,EAAU,KACTA,EAAU,IAAMA,GAEpB,IAAIE,EAAUN,EAAKO,aAChBD,EAAU,KACTA,EAAU,IAAMA,GAEpB,IAAIE,EAAS,MAEVN,GAAS,KACRM,EAAS,MAENN,EAAQ,KACPA,GAAS,KAGdA,EAAQ,KACPA,EAAQ,IAAMA,GAGlBL,KAAKY,SAAS,CAACf,KAAMQ,EAAQ,IAAME,EAAU,IAAME,EAAUE,M,+BAI7D,OACI,yBAAKE,GAAG,SACHb,KAAKJ,MAAMC,U,GA5CRiB,IAAMC,YAkDpBC,E,kDACF,WAAYrB,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTqB,QAAS,IAAIC,eACbC,YAAa,MACbC,KAAM,MACNC,SAAU,MACVC,SAAU,IAGd,EAAKC,eAAiB,EAAKA,eAAexB,KAApB,gBAVR,E,gEAcdC,KAAKJ,MAAMqB,QAAQO,KAAK,MAAO,yDAC/BxB,KAAKJ,MAAMqB,QAAQQ,OACnBzB,KAAKC,SAAWC,YAAYF,KAAKuB,eAAgB,O,uCAIjD,GAAiC,IAA9BvB,KAAKJ,MAAMqB,QAAQS,OAAtB,CAIA,IAAIC,EAAcC,KAAKC,MAAM7B,KAAKJ,MAAMqB,QAAQa,cAChD9B,KAAKY,SAAS,CAACO,YAAaQ,EAAYI,WAAWC,QAAQ,GAAGb,cAC9DnB,KAAKY,SAAS,CAACQ,KAAM,SAAWO,EAAYI,WAAWC,QAAQ,GAAGC,UAAY,IAAMN,EAAYI,WAAWC,QAAQ,GAAGE,gBACtHlC,KAAKY,SAAS,CAACS,SAAUM,EAAYI,WAAWC,QAAQ,GAAGG,gBAC3DnC,KAAKY,SAAS,CAACU,SAAUK,EAAYI,WAAWC,QAAQ,GAAGI,OAC3DC,cAAcrC,KAAKC,a,+BAInB,OACI,yBAAKY,GAAG,WACJ,yBAAKA,GAAG,qBACJ,yBAAKyB,IAAKtC,KAAKJ,MAAM0B,WACrB,2BAAItB,KAAKJ,MAAMuB,YAAf,UAEJ,yCACA,2BAAInB,KAAKJ,MAAMyB,SAAf,KACA,2BAAIrB,KAAKJ,MAAMwB,W,GA1CTN,IAAMC,WA2DbwB,MAXf,WACI,OACA,yBAAKC,UAAU,OACX,yBAAK3B,GAAG,QACJ,kBAAC,EAAD,MACA,kBAAC,EAAD,SCrGZ4B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.bb24526d.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass Clock extends React.Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            time: '00:00:00 AM'\n        }\n\n        this.updateTime = this.updateTime.bind(this);\n    }\n\n    componentDidMount(){\n        this.interval = setInterval(this.updateTime, 1000);\n    }\n\n    updateTime(){\n        let date = new Date();\n        let hours = date.getHours();\n        let minutes = date.getMinutes();\n        if(minutes < 10){\n            minutes = '0' + minutes;\n        }\n        let seconds = date.getSeconds();\n        if(seconds < 10){\n            seconds = '0' + seconds;\n        }\n        let period = ' AM';\n\n        if(hours >= 12){\n            period = ' PM'\n\n            if(hours > 12){\n                hours -= 12;\n            }\n        }\n        if(hours < 10){\n            hours = '0' + hours;\n        }\n\n        this.setState({time: hours + ':' + minutes + ':' + seconds + period});\n    }\n\n    render(){\n        return(\n            <div id='clock'>\n                {this.state.time}\n            </div>\n        );\n    }\n}\n\nclass Weather extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            request: new XMLHttpRequest(),\n            temperature: 'N/A',\n            wind: 'N/A',\n            forecast: 'N/A',\n            imageUrl: ''\n        }\n\n        this.getWeatherData = this.getWeatherData.bind(this);\n    }\n\n    componentDidMount(){\n        this.state.request.open('GET', 'https://api.weather.gov/gridpoints/LIX/61,92/forecast');\n        this.state.request.send();\n        this.interval = setInterval(this.getWeatherData, 1000);\n    }\n\n    getWeatherData(){\n        if(this.state.request.status === 0){\n            return\n        }\n\n        let weatherData = JSON.parse(this.state.request.responseText);\n        this.setState({temperature: weatherData.properties.periods[0].temperature});\n        this.setState({wind: 'Wind: ' + weatherData.properties.periods[0].windSpeed + ' ' + weatherData.properties.periods[0].windDirection});\n        this.setState({forecast: weatherData.properties.periods[0].shortForecast});\n        this.setState({imageUrl: weatherData.properties.periods[0].icon});\n        clearInterval(this.interval);\n    }\n\n    render(){\n        return(\n            <div id=\"weather\">\n                <div id='temp-and-icon-div'>\n                    <img src={this.state.imageUrl} />\n                    <p>{this.state.temperature}&deg;F</p>\n                </div>\n                <p>Kenner, LA</p>\n                <p>{this.state.forecast} </p>\n                <p>{this.state.wind}</p>\n            </div>\n        )\n    }\n}\n\nfunction App() {\n    return (\n    <div className=\"App\">\n        <div id='grid'>\n            <Clock />\n            <Weather />\n        </div>\n    </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}